{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":72489,"databundleVersionId":8096274,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom ydata_profiling import ProfileReport\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn import set_config\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder,MinMaxScaler\nfrom sklearn.compose import ColumnTransformer","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:03.717891Z","iopub.execute_input":"2024-05-15T10:37:03.718626Z","iopub.status.idle":"2024-05-15T10:37:03.725103Z","shell.execute_reply.started":"2024-05-15T10:37:03.718590Z","shell.execute_reply":"2024-05-15T10:37:03.724157Z"},"trusted":true},"execution_count":93,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s4e4/train.csv')\ntest= pd.read_csv('/kaggle/input/playground-series-s4e4/test.csv')\n\ntarget=train['Rings']","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:03.732411Z","iopub.execute_input":"2024-05-15T10:37:03.732839Z","iopub.status.idle":"2024-05-15T10:37:03.990144Z","shell.execute_reply.started":"2024-05-15T10:37:03.732807Z","shell.execute_reply":"2024-05-15T10:37:03.989056Z"},"trusted":true},"execution_count":94,"outputs":[]},{"cell_type":"code","source":"train","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:03.992332Z","iopub.execute_input":"2024-05-15T10:37:03.992763Z","iopub.status.idle":"2024-05-15T10:37:04.021072Z","shell.execute_reply.started":"2024-05-15T10:37:03.992732Z","shell.execute_reply":"2024-05-15T10:37:04.019900Z"},"trusted":true},"execution_count":95,"outputs":[{"execution_count":95,"output_type":"execute_result","data":{"text/plain":"          id Sex  Length  Diameter  Height  Whole weight  Whole weight.1  \\\n0          0   F   0.550     0.430   0.150        0.7715          0.3285   \n1          1   F   0.630     0.490   0.145        1.1300          0.4580   \n2          2   I   0.160     0.110   0.025        0.0210          0.0055   \n3          3   M   0.595     0.475   0.150        0.9145          0.3755   \n4          4   I   0.555     0.425   0.130        0.7820          0.3695   \n...      ...  ..     ...       ...     ...           ...             ...   \n90610  90610   M   0.335     0.235   0.075        0.1585          0.0685   \n90611  90611   M   0.555     0.425   0.150        0.8790          0.3865   \n90612  90612   I   0.435     0.330   0.095        0.3215          0.1510   \n90613  90613   I   0.345     0.270   0.075        0.2000          0.0980   \n90614  90614   I   0.425     0.325   0.100        0.3455          0.1525   \n\n       Whole weight.2  Shell weight  Rings  \n0              0.1465        0.2400     11  \n1              0.2765        0.3200     11  \n2              0.0030        0.0050      6  \n3              0.2055        0.2500     10  \n4              0.1600        0.1975      9  \n...               ...           ...    ...  \n90610          0.0370        0.0450      6  \n90611          0.1815        0.2400      9  \n90612          0.0785        0.0815      6  \n90613          0.0490        0.0700      6  \n90614          0.0785        0.1050      8  \n\n[90615 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Sex</th>\n      <th>Length</th>\n      <th>Diameter</th>\n      <th>Height</th>\n      <th>Whole weight</th>\n      <th>Whole weight.1</th>\n      <th>Whole weight.2</th>\n      <th>Shell weight</th>\n      <th>Rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>F</td>\n      <td>0.550</td>\n      <td>0.430</td>\n      <td>0.150</td>\n      <td>0.7715</td>\n      <td>0.3285</td>\n      <td>0.1465</td>\n      <td>0.2400</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>F</td>\n      <td>0.630</td>\n      <td>0.490</td>\n      <td>0.145</td>\n      <td>1.1300</td>\n      <td>0.4580</td>\n      <td>0.2765</td>\n      <td>0.3200</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>I</td>\n      <td>0.160</td>\n      <td>0.110</td>\n      <td>0.025</td>\n      <td>0.0210</td>\n      <td>0.0055</td>\n      <td>0.0030</td>\n      <td>0.0050</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>M</td>\n      <td>0.595</td>\n      <td>0.475</td>\n      <td>0.150</td>\n      <td>0.9145</td>\n      <td>0.3755</td>\n      <td>0.2055</td>\n      <td>0.2500</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>I</td>\n      <td>0.555</td>\n      <td>0.425</td>\n      <td>0.130</td>\n      <td>0.7820</td>\n      <td>0.3695</td>\n      <td>0.1600</td>\n      <td>0.1975</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>90610</th>\n      <td>90610</td>\n      <td>M</td>\n      <td>0.335</td>\n      <td>0.235</td>\n      <td>0.075</td>\n      <td>0.1585</td>\n      <td>0.0685</td>\n      <td>0.0370</td>\n      <td>0.0450</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>90611</th>\n      <td>90611</td>\n      <td>M</td>\n      <td>0.555</td>\n      <td>0.425</td>\n      <td>0.150</td>\n      <td>0.8790</td>\n      <td>0.3865</td>\n      <td>0.1815</td>\n      <td>0.2400</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>90612</th>\n      <td>90612</td>\n      <td>I</td>\n      <td>0.435</td>\n      <td>0.330</td>\n      <td>0.095</td>\n      <td>0.3215</td>\n      <td>0.1510</td>\n      <td>0.0785</td>\n      <td>0.0815</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>90613</th>\n      <td>90613</td>\n      <td>I</td>\n      <td>0.345</td>\n      <td>0.270</td>\n      <td>0.075</td>\n      <td>0.2000</td>\n      <td>0.0980</td>\n      <td>0.0490</td>\n      <td>0.0700</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>90614</th>\n      <td>90614</td>\n      <td>I</td>\n      <td>0.425</td>\n      <td>0.325</td>\n      <td>0.100</td>\n      <td>0.3455</td>\n      <td>0.1525</td>\n      <td>0.0785</td>\n      <td>0.1050</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n<p>90615 rows Ã— 10 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def check_data(df):\n    for col in df.columns:\n        print(\"column\", col , df[col].isna().sum())\ncheck_data(train)\ncheck_data(test)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.022581Z","iopub.execute_input":"2024-05-15T10:37:04.023664Z","iopub.status.idle":"2024-05-15T10:37:04.053540Z","shell.execute_reply.started":"2024-05-15T10:37:04.023625Z","shell.execute_reply":"2024-05-15T10:37:04.052370Z"},"trusted":true},"execution_count":96,"outputs":[{"name":"stdout","text":"column id 0\ncolumn Sex 0\ncolumn Length 0\ncolumn Diameter 0\ncolumn Height 0\ncolumn Whole weight 0\ncolumn Whole weight.1 0\ncolumn Whole weight.2 0\ncolumn Shell weight 0\ncolumn Rings 0\ncolumn id 0\ncolumn Sex 0\ncolumn Length 0\ncolumn Diameter 0\ncolumn Height 0\ncolumn Whole weight 0\ncolumn Whole weight.1 0\ncolumn Whole weight.2 0\ncolumn Shell weight 0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"profile=ProfileReport(train)\nprofile.to_notebook_iframe()\n\n\ntest_profile=ProfileReport(test)\ntest_profile","metadata":{"execution":{"iopub.status.busy":"2024-05-14T08:39:16.835024Z","iopub.execute_input":"2024-05-14T08:39:16.835409Z","iopub.status.idle":"2024-05-14T08:39:38.393120Z","shell.execute_reply.started":"2024-05-14T08:39:16.835379Z","shell.execute_reply":"2024-05-14T08:39:38.392205Z"}}},{"cell_type":"markdown","source":"## Dataframe memory usage optimization","metadata":{}},{"cell_type":"code","source":"class df_memory_usage():\n    def __init__(self):\n        pass\n    \n    def fit(self, X , y=None ):\n        return self\n    def transform(self, X):\n        #print(\"memory usage before optimization:{:.2f} MB\".format(X.memory_usage().sum()/1024**2))\n        cols=X.columns\n\n        for col in cols:\n            col_type=X[col].dtype\n\n            if col_type != object:\n                min_value=X[col].min()\n                max_value=X[col].max()\n\n                if str(col_type)[:3] == 'int':\n                    if min_value > np.iinfo(np.int8).min and max_value < np.iinfo(np.int8).max:\n                        X[col]=X[col].astype(np.int8)\n                    if min_value > np.iinfo(np.int16).min and max_value < np.iinfo(np.int16).max:\n                        X[col]=X[col].astype(np.int16)\n                    if min_value > np.iinfo(np.int32).min and max_value < np.iinfo(np.int32).max:\n                        X[col]=X[col].astype(np.int32)\n                    if min_value > np.iinfo(np.int64).min and max_value < np.iinfo(np.int64).max:\n                        X[col]=X[col].astype(np.int64)\n\n                else:\n                    if min_value > np.finfo(np.float16).min and max_value < np.finfo(np.float16).max:\n                        X[col]=X[col].astype(np.float16)\n                    if min_value > np.finfo(np.float32).min and max_value < np.finfo(np.float32).max:\n                        X[col]=X[col].astype(np.float32)\n                    else:\n                        X[col]=X[col].astype(np.float64)\n\n        #print(\"Dataframe memory usage after optimization :{:.2f} MB\".format(X.memory_usage().sum()/1024**2))\n        return X\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.054956Z","iopub.execute_input":"2024-05-15T10:37:04.055327Z","iopub.status.idle":"2024-05-15T10:37:04.071029Z","shell.execute_reply.started":"2024-05-15T10:37:04.055296Z","shell.execute_reply":"2024-05-15T10:37:04.069814Z"},"trusted":true},"execution_count":97,"outputs":[]},{"cell_type":"markdown","source":"                \ntrain=df_mem_size_optimize(train)\ntest=df_mem_size_optimize(test)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T09:46:08.085683Z","iopub.execute_input":"2024-05-14T09:46:08.086061Z","iopub.status.idle":"2024-05-14T09:46:08.118352Z","shell.execute_reply.started":"2024-05-14T09:46:08.086036Z","shell.execute_reply":"2024-05-14T09:46:08.116853Z"}}},{"cell_type":"code","source":"class drop_target():\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        return X.drop(['Rings'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.074476Z","iopub.execute_input":"2024-05-15T10:37:04.074866Z","iopub.status.idle":"2024-05-15T10:37:04.086246Z","shell.execute_reply.started":"2024-05-15T10:37:04.074833Z","shell.execute_reply":"2024-05-15T10:37:04.084848Z"},"trusted":true},"execution_count":98,"outputs":[]},{"cell_type":"code","source":"memory_optimization = df_memory_usage()\ndropper=drop_target()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.087943Z","iopub.execute_input":"2024-05-15T10:37:04.088415Z","iopub.status.idle":"2024-05-15T10:37:04.096965Z","shell.execute_reply.started":"2024-05-15T10:37:04.088374Z","shell.execute_reply":"2024-05-15T10:37:04.095724Z"},"trusted":true},"execution_count":99,"outputs":[]},{"cell_type":"code","source":"ohe_encoder=ColumnTransformer(transformers=[\n    ('one hot', OneHotEncoder(),['Sex'])\n],remainder='passthrough')","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.098530Z","iopub.execute_input":"2024-05-15T10:37:04.098976Z","iopub.status.idle":"2024-05-15T10:37:04.108861Z","shell.execute_reply.started":"2024-05-15T10:37:04.098945Z","shell.execute_reply":"2024-05-15T10:37:04.107714Z"},"trusted":true},"execution_count":100,"outputs":[]},{"cell_type":"markdown","source":"## Pipeline","metadata":{}},{"cell_type":"markdown","source":"pipe=Pipeline([\n    (\"memory_optimization\",memory_optimization),\n    (\"dropper\",dropper)\n])\n\npipe.fit_transform(train)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T14:11:53.804287Z","iopub.execute_input":"2024-05-14T14:11:53.804827Z","iopub.status.idle":"2024-05-14T14:11:53.858714Z","shell.execute_reply.started":"2024-05-14T14:11:53.804758Z","shell.execute_reply":"2024-05-14T14:11:53.857012Z"}}},{"cell_type":"markdown","source":"## make_pipeline","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score, median_absolute_error\nfrom sklearn.model_selection import cross_val_score\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.109892Z","iopub.execute_input":"2024-05-15T10:37:04.110267Z","iopub.status.idle":"2024-05-15T10:37:04.122711Z","shell.execute_reply.started":"2024-05-15T10:37:04.110208Z","shell.execute_reply":"2024-05-15T10:37:04.121295Z"},"trusted":true},"execution_count":101,"outputs":[]},{"cell_type":"code","source":"models = {\n    'Linear Regression': LinearRegression(),\n    'Ridge Regression': Ridge(),\n    'Lasso Regression': Lasso(),\n    'ElasticNet Regression': ElasticNet(),\n    'Decision Tree': DecisionTreeRegressor(),\n    'Random Forest': RandomForestRegressor(),\n    'Gradient Boosting': GradientBoostingRegressor(),\n    'Support Vector Machine': SVR(),\n    'K-Nearest Neighbors': KNeighborsRegressor(),\n    'CatBoost': CatBoostRegressor()\n}","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.124387Z","iopub.execute_input":"2024-05-15T10:37:04.124750Z","iopub.status.idle":"2024-05-15T10:37:04.138890Z","shell.execute_reply.started":"2024-05-15T10:37:04.124719Z","shell.execute_reply":"2024-05-15T10:37:04.137686Z"},"trusted":true},"execution_count":102,"outputs":[]},{"cell_type":"markdown","source":"## Simple pipeline\npipe=make_pipeline(memory_optimization,dropper,ohe_encoder,StandardScaler())\npipe.fit_transform(train)\n#set_config(display='diagram')","metadata":{"execution":{"iopub.status.busy":"2024-05-14T14:40:04.199920Z","iopub.execute_input":"2024-05-14T14:40:04.200502Z","iopub.status.idle":"2024-05-14T14:40:04.306428Z","shell.execute_reply.started":"2024-05-14T14:40:04.200424Z","shell.execute_reply":"2024-05-14T14:40:04.305041Z"}}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import make_scorer\ndef rmsle_score(y_true, y_pred):\n    assert len(y_true) == len(y_pred)\n    return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n\n# Make RMSLE scorer callable\nrmsle_scorer = make_scorer(rmsle_score, greater_is_better=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.140190Z","iopub.execute_input":"2024-05-15T10:37:04.140571Z","iopub.status.idle":"2024-05-15T10:37:04.151536Z","shell.execute_reply.started":"2024-05-15T10:37:04.140540Z","shell.execute_reply":"2024-05-15T10:37:04.150546Z"},"trusted":true},"execution_count":103,"outputs":[]},{"cell_type":"code","source":"for model_name, model in models.items():\n    #pipe_for_testing=make_pipeline(memory_optimization, dropper, ohe_encoder, StandardScaler(), model) \n    pipe_for_testing=make_pipeline(memory_optimization, dropper, ohe_encoder, MinMaxScaler(), model) \n    scores = cross_val_score(pipe_for_testing, train, target, cv=10, scoring=rmsle_scorer)\n    \n    # Calculate average RMSLE score\n    avg_rmsle_score = -scores.mean()  # Note the negation because make_scorer expects lower values to be better\n    \n    # Print average RMSLE score for the model\n    print(f\"Model: {model_name}\")\n    print(\"Cross-validation RMSLE scores:\", -scores)  # Negate the scores for clarity\n    print(\"Average RMSLE score:\", avg_rmsle_score)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T10:37:04.152720Z","iopub.execute_input":"2024-05-15T10:37:04.153078Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n","output_type":"stream"},{"name":"stdout","text":"Model: Linear Regression\nCross-validation RMSLE scores: [0.1644766  0.16850231 0.16799957 0.16463839 0.1643231  0.16471745\n 0.16236457 0.1627059  0.16235057 0.15871891]\nAverage RMSLE score: 0.16407973573927365\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n/tmp/ipykernel_33/1958207420.py:5: RuntimeWarning: invalid value encountered in log1p\n  return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n","output_type":"stream"},{"name":"stdout","text":"Model: Ridge Regression\nCross-validation RMSLE scores: [0.16428846 0.16790147 0.16800109 0.16435481 0.16433162 0.16441184\n 0.162141   0.17577302 0.16228869 0.15867911]\nAverage RMSLE score: 0.16521710997544767\nModel: Lasso Regression\nCross-validation RMSLE scores: [0.28961993 0.28859555 0.29343977 0.28730163 0.28922942 0.28840453\n 0.28544035 0.28848651 0.28672366 0.28723065]\nAverage RMSLE score: 0.2884472019114658\nModel: ElasticNet Regression\nCross-validation RMSLE scores: [0.27982072 0.27888155 0.28382964 0.27754182 0.27946184 0.27870346\n 0.2756763  0.27873793 0.2771348  0.27754716]\nAverage RMSLE score: 0.27873352193218637\nModel: Decision Tree\nCross-validation RMSLE scores: [0.2379392  0.21520502 0.22235498 0.21138448 0.2202579  0.21217782\n 0.21198592 0.21356265 0.21591337 0.24005069]\nAverage RMSLE score: 0.2200832030011986\n","output_type":"stream"}]}]}