{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":72489,"databundleVersionId":8096274,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom ydata_profiling import ProfileReport\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn import set_config\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","metadata":{"execution":{"iopub.status.busy":"2024-05-14T14:36:41.052819Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s4e4/train.csv')\ntest= pd.read_csv('/kaggle/input/playground-series-s4e4/test.csv')\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"profile=ProfileReport(train)\nprofile.to_notebook_iframe()\n\n\ntest_profile=ProfileReport(test)\ntest_profile","metadata":{"execution":{"iopub.status.busy":"2024-05-14T08:39:16.835024Z","iopub.execute_input":"2024-05-14T08:39:16.835409Z","iopub.status.idle":"2024-05-14T08:39:38.393120Z","shell.execute_reply.started":"2024-05-14T08:39:16.835379Z","shell.execute_reply":"2024-05-14T08:39:38.392205Z"}}},{"cell_type":"markdown","source":"## Dataframe memory usage optimization","metadata":{}},{"cell_type":"code","source":"class df_memory_usage():\n    def __init__(self):\n        pass\n    \n    def fit(self, X , y=None ):\n        return self\n    def transform(self, X):\n        print(\"memory usage before optimization:{:.2f} MB\".format(X.memory_usage().sum()/1024**2))\n        cols=X.columns\n\n        for col in cols:\n            col_type=X[col].dtype\n\n            if col_type != object:\n                min_value=X[col].min()\n                max_value=X[col].max()\n\n                if str(col_type)[:3] == 'int':\n                    if min_value > np.iinfo(np.int8).min and max_value < np.iinfo(np.int8).max:\n                        X[col]=X[col].astype(np.int8)\n                    if min_value > np.iinfo(np.int16).min and max_value < np.iinfo(np.int16).max:\n                        X[col]=X[col].astype(np.int16)\n                    if min_value > np.iinfo(np.int32).min and max_value < np.iinfo(np.int32).max:\n                        X[col]=X[col].astype(np.int32)\n                    if min_value > np.iinfo(np.int64).min and max_value < np.iinfo(np.int64).max:\n                        X[col]=X[col].astype(np.int64)\n\n                else:\n                    if min_value > np.finfo(np.float16).min and max_value < np.finfo(np.float16).max:\n                        X[col]=X[col].astype(np.float16)\n                    if min_value > np.finfo(np.float32).min and max_value < np.finfo(np.float32).max:\n                        X[col]=X[col].astype(np.float32)\n                    else:\n                        X[col]=X[col].astype(np.float64)\n\n        print(\"Dataframe memory usage after optimization :{:.2f} MB\".format(X.memory_usage().sum()/1024**2))\n        return X\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"                \ntrain=df_mem_size_optimize(train)\ntest=df_mem_size_optimize(test)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T09:46:08.085683Z","iopub.execute_input":"2024-05-14T09:46:08.086061Z","iopub.status.idle":"2024-05-14T09:46:08.118352Z","shell.execute_reply.started":"2024-05-14T09:46:08.086036Z","shell.execute_reply":"2024-05-14T09:46:08.116853Z"}}},{"cell_type":"code","source":"class drop_target():\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        return X.drop(['Rings'],axis=1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"memory_optimization = df_memory_usage()\ndropper=drop_target()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ohe_encoder=ColumnTransformer(transformers=[\n    ('one hot', OneHotEncoder(),['Sex'])\n],remainder='passthrough')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Pipeline","metadata":{}},{"cell_type":"markdown","source":"pipe=Pipeline([\n    (\"memory_optimization\",memory_optimization),\n    (\"dropper\",dropper)\n])\n\npipe.fit_transform(train)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T14:11:53.804287Z","iopub.execute_input":"2024-05-14T14:11:53.804827Z","iopub.status.idle":"2024-05-14T14:11:53.858714Z","shell.execute_reply.started":"2024-05-14T14:11:53.804758Z","shell.execute_reply":"2024-05-14T14:11:53.857012Z"}}},{"cell_type":"markdown","source":"## make_pipeline","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom catboost import CatBoostRegressor\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models = {\n    'Linear Regression': LinearRegression(),\n    'Ridge Regression': Ridge(),\n    'Lasso Regression': Lasso(),\n    'ElasticNet Regression': ElasticNet(),\n    'Decision Tree': DecisionTreeRegressor(),\n    'Random Forest': RandomForestRegressor(),\n    'Gradient Boosting': GradientBoostingRegressor(),\n    'Support Vector Machine': SVR(),\n    'K-Nearest Neighbors': KNeighborsRegressor(),\n    'CatBoost': CatBoostRegressor()\n}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipe=make_pipeline(memory_optimization,dropper,ohe_encoder,StandardScaler())\n\npipe.fit_transform(train,test)\n#set_config(display='diagram')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train","metadata":{},"execution_count":null,"outputs":[]}]}