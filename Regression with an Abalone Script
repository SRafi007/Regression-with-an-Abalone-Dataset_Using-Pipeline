{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":72489,"databundleVersionId":8096274,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom ydata_profiling import ProfileReport\nfrom sklearn.pipeline import Pipeline","metadata":{"execution":{"iopub.status.busy":"2024-05-14T09:53:02.255522Z","iopub.execute_input":"2024-05-14T09:53:02.256016Z","iopub.status.idle":"2024-05-14T09:53:02.261182Z","shell.execute_reply.started":"2024-05-14T09:53:02.255981Z","shell.execute_reply":"2024-05-14T09:53:02.260235Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s4e4/train.csv')\ntest= pd.read_csv('/kaggle/input/playground-series-s4e4/test.csv')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-14T09:53:02.262822Z","iopub.execute_input":"2024-05-14T09:53:02.263247Z","iopub.status.idle":"2024-05-14T09:53:02.382306Z","shell.execute_reply.started":"2024-05-14T09:53:02.263223Z","shell.execute_reply":"2024-05-14T09:53:02.380969Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"profile=ProfileReport(train)\nprofile.to_notebook_iframe()\n\n\ntest_profile=ProfileReport(test)\ntest_profile","metadata":{"execution":{"iopub.status.busy":"2024-05-14T08:39:16.835024Z","iopub.execute_input":"2024-05-14T08:39:16.835409Z","iopub.status.idle":"2024-05-14T08:39:38.393120Z","shell.execute_reply.started":"2024-05-14T08:39:16.835379Z","shell.execute_reply":"2024-05-14T08:39:38.392205Z"}}},{"cell_type":"markdown","source":"## Dataframe memory usage optimization","metadata":{}},{"cell_type":"code","source":"class df_memory_usage():\n    def fit(self, df ):\n        return self\n    def transform(df):\n        print(\"memory usage before optimization:{:.2f} MB\".format(df.memory_usage().sum()/1024**2))\n        cols=df.columns\n\n        for col in cols:\n            col_type=df[col].dtype\n\n            if col_type != object:\n                min_value=df[col].min()\n                max_value=df[col].max()\n\n                if str(col_type)[:3] == 'int':\n                    if min_value > np.iinfo(np.int8).min and max_value < np.iinfo(np.int8).max:\n                        df[col]=df[col].astype(np.int8)\n                    if min_value > np.iinfo(np.int16).min and max_value < np.iinfo(np.int16).max:\n                        df[col]=df[col].astype(np.int16)\n                    if min_value > np.iinfo(np.int32).min and max_value < np.iinfo(np.int32).max:\n                        df[col]=df[col].astype(np.int32)\n                    if min_value > np.iinfo(np.int64).min and max_value < np.iinfo(np.int64).max:\n                        df[col]=df[col].astype(np.int64)\n\n                else:\n                    if min_value > np.finfo(np.float16).min and max_value < np.finfo(np.float16).max:\n                        df[col]=df[col].astype(np.float16)\n                    if min_value > np.finfo(np.float32).min and max_value < np.finfo(np.float32).max:\n                        df[col]=df[col].astype(np.float32)\n                    else:\n                        df[col]=df[col].astype(np.float64)\n\n        print(\"Dataframe memory usage after optimization :{:.2f} MB\".format(df.memory_usage().sum()/1024**2))\n        return df\n","metadata":{"execution":{"iopub.status.busy":"2024-05-14T09:53:02.384402Z","iopub.execute_input":"2024-05-14T09:53:02.384985Z","iopub.status.idle":"2024-05-14T09:53:02.398005Z","shell.execute_reply.started":"2024-05-14T09:53:02.384953Z","shell.execute_reply":"2024-05-14T09:53:02.396121Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":"                \ntrain=df_mem_size_optimize(train)\ntest=df_mem_size_optimize(test)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T09:46:08.085683Z","iopub.execute_input":"2024-05-14T09:46:08.086061Z","iopub.status.idle":"2024-05-14T09:46:08.118352Z","shell.execute_reply.started":"2024-05-14T09:46:08.086036Z","shell.execute_reply":"2024-05-14T09:46:08.116853Z"}}},{"cell_type":"code","source":"class drop_target():\n    def fit(self, df):\n        return self\n    def transform(df):\n        return df.drop(['Rings'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T09:53:02.401561Z","iopub.execute_input":"2024-05-14T09:53:02.402913Z","iopub.status.idle":"2024-05-14T09:53:02.410564Z","shell.execute_reply.started":"2024-05-14T09:53:02.402835Z","shell.execute_reply":"2024-05-14T09:53:02.408410Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"pipe=Pipeline([\n    (\"memory\",df_memory_usage()),\n    (\"droper\",drop_target())\n])\n\npipe.fit_transform(train)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T09:53:25.559134Z","iopub.execute_input":"2024-05-14T09:53:25.559497Z","iopub.status.idle":"2024-05-14T09:53:26.538497Z","shell.execute_reply.started":"2024-05-14T09:53:25.559471Z","shell.execute_reply":"2024-05-14T09:53:26.537390Z"},"trusted":true},"execution_count":24,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[24], line 6\u001b[0m\n\u001b[1;32m      1\u001b[0m pipe\u001b[38;5;241m=\u001b[39mPipeline([\n\u001b[1;32m      2\u001b[0m     (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmemory\u001b[39m\u001b[38;5;124m\"\u001b[39m,df_memory_usage()),\n\u001b[1;32m      3\u001b[0m     (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdroper\u001b[39m\u001b[38;5;124m\"\u001b[39m,drop_target())\n\u001b[1;32m      4\u001b[0m ])\n\u001b[0;32m----> 6\u001b[0m \u001b[43mpipe\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/pipeline.py:437\u001b[0m, in \u001b[0;36mPipeline.fit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    410\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Fit the model and transform with the final estimator.\u001b[39;00m\n\u001b[1;32m    411\u001b[0m \n\u001b[1;32m    412\u001b[0m \u001b[38;5;124;03mFits all the transformers one after the other and transform the\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    434\u001b[0m \u001b[38;5;124;03m    Transformed samples.\u001b[39;00m\n\u001b[1;32m    435\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    436\u001b[0m fit_params_steps \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_fit_params(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\n\u001b[0;32m--> 437\u001b[0m Xt \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_params_steps\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    439\u001b[0m last_step \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_final_estimator\n\u001b[1;32m    440\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _print_elapsed_time(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPipeline\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_log_message(\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps) \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m)):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/pipeline.py:339\u001b[0m, in \u001b[0;36mPipeline._fit\u001b[0;34m(self, X, y, **fit_params_steps)\u001b[0m\n\u001b[1;32m    336\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_fit\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, y\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params_steps):\n\u001b[1;32m    337\u001b[0m     \u001b[38;5;66;03m# shallow copy of steps - this should really be steps_\u001b[39;00m\n\u001b[1;32m    338\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps)\n\u001b[0;32m--> 339\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_steps\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    340\u001b[0m     \u001b[38;5;66;03m# Setup the memory\u001b[39;00m\n\u001b[1;32m    341\u001b[0m     memory \u001b[38;5;241m=\u001b[39m check_memory(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmemory)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/pipeline.py:218\u001b[0m, in \u001b[0;36mPipeline._validate_steps\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    215\u001b[0m names, estimators \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mzip\u001b[39m(\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps)\n\u001b[1;32m    217\u001b[0m \u001b[38;5;66;03m# validate names\u001b[39;00m\n\u001b[0;32m--> 218\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_names\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnames\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    220\u001b[0m \u001b[38;5;66;03m# validate estimators\u001b[39;00m\n\u001b[1;32m    221\u001b[0m transformers \u001b[38;5;241m=\u001b[39m estimators[:\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/metaestimators.py:87\u001b[0m, in \u001b[0;36m_BaseComposition._validate_names\u001b[0;34m(self, names)\u001b[0m\n\u001b[1;32m     85\u001b[0m invalid_names \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mset\u001b[39m(names)\u001b[38;5;241m.\u001b[39mintersection(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_params(deep\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m))\n\u001b[1;32m     86\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m invalid_names:\n\u001b[0;32m---> 87\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m     88\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEstimator names conflict with constructor arguments: \u001b[39m\u001b[38;5;132;01m{0!r}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m     89\u001b[0m             \u001b[38;5;28msorted\u001b[39m(invalid_names)\n\u001b[1;32m     90\u001b[0m         )\n\u001b[1;32m     91\u001b[0m     )\n\u001b[1;32m     92\u001b[0m invalid_names \u001b[38;5;241m=\u001b[39m [name \u001b[38;5;28;01mfor\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m names \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m name]\n\u001b[1;32m     93\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m invalid_names:\n","\u001b[0;31mValueError\u001b[0m: Estimator names conflict with constructor arguments: ['memory']"],"ename":"ValueError","evalue":"Estimator names conflict with constructor arguments: ['memory']","output_type":"error"}]}]}